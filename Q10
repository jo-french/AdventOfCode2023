import pandas as pd
import numpy as np

def next_tile(i, j, k, l):
    symb = grid[k][l]
    if k == i-1: # In square above previous square
        if symb == "|":
            return [k-1, l]
        elif symb == "7":
            return [k, l-1]
        elif symb == "F":
            return [k, l+1]
    elif k == i+1: # Square below previous square
        if symb == "|":
            return [k+1, l]
        elif symb == "J":
            return [k, l-1]
        elif symb == "L":
            return [k, l+1]
    elif l == j-1: # To the left
        if symb == "-":
            return [k, l-1]
        elif symb == "L":
            return [k-1, l]
        elif symb == "F":
            return [k+1, l]
    elif l == j+1: # To the right
        if symb == "-":
            return [k, l+1]
        elif symb == "J":
            return [k-1,l]
        elif symb == "7":
            return [k+1,l]

with open('input.txt') as f:
    lines = f.read()
    
lines = lines.split("\n")
lines = lines[:-1]

grid = [[x for x in l] for l in lines]

# Inspection shows that the first moves (from S) are left and down.
N = 140
S = [[i, j] for i in range(140) for j in range(140) if grid[i][j] == "S"][0]
initial_pts = [[[42,24],1],[[43,25],1]]
path1 = [[S,0], initial_pts[0]]
path2 = [[S,0],initial_pts[1]]

while path1[-1][0] != path2[-1][0]:
    i, j = path1[-2][0]
    k, l = path1[-1][0]
    currdist = path1[-1][1]
    next1 = next_tile(i, j, k, l)
    if next1 == path2[-1][0]:
        break
    path1.append([next1, currdist+1])
    i, j = path2[-2][0]
    k, l = path2[-1][0]
    currdist = path2[-1][1]
    next2 = next_tile(i, j, k, l)
    if next2 == path1[-1][0]:
        break
    path2.append([next2, currdist+1])
    
path1[-1]
path2[-1]

# 7173

# Part 2

# Current options:
# 1. Print it out as a file (3 pages in Word) and join up the lines of the path. Then count the small number of inner squares.
# 2. Define movement along the grid that does not cross the lines of the loop, e.g. you may travel along any squares that are "." and along or in between
# specific sections of path, e.g. up between "J" and "L".
# Then you can pick a corner not in the path and use Dijkstra's alorithm to find the shortest path from the corner to any other cell not in the loop.
# If this stops with no answer, no path was possible and the point is inside the loop.

# Keep the cells in the loop as they are and replace all other cells with "."
colgrid = [[1 if [i, j] in [p[0] for p in path1] or [i, j] in [p[0] for p in path2] else 0 for j in range(N)] for i in range(N)]
npgrid = np.array(colgrid)
pathgrid = [[grid[i][j] if [i, j] in [p[0] for p in path1] or [i, j] in [p[0] for p in path2] else "." for j in range(N)] for i in range(N)]
pgrid = [("").join(l) for l in pathgrid]
outtext = ("\n").join([l for l in pgrid])

with open("output.txt", "w") as fwrite:
    fwrite.write(outtext)

cells_not_in_loop = [[i, j] for i in range(N) for j in range(N) if [i, j] not in [p[0] for p in path1] and [i, j] not in [p[0] for p in path2]]
