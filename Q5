import pandas as pd
import numpy as np

with open('input.txt') as f:
    lines = f.read()
    
def map_data(a, b):
    return [[int(num) for num in l.split()] for l in lines[a:b]]

def map_input(mapdata):
    def datafunction(x):
        for triple in mapdata:
            if x >= triple[1] and x < triple[1]+triple[2]:
                return x + triple[0] - triple[1]
        return x
    return datafunction

lines = lines.split("\n")
lines = lines[:-1]

seeds = [int(x) for x in lines[0].split(": ")[1].split()]

# seeds -> soil -> fertiliser -> water -> light -> temperature -> humidity -> location

seedtosoil = map_data(3, 19)
soiltofertiliser = map_data(21, 54)
fertilisertowater = map_data(56, 82)
watertolight = map_data(84, 122)
lighttotemperature = map_data(124, 134)
temperaturetohumidity = map_data(136, 173)
humiditytolocation = map_data(175, 197)


seedtosoilmap = map_input(seedtosoil)
soiltofertilisermap = map_input(soiltofertiliser)
fertilisertowatermap = map_input(fertilisertowater)
watertolightmap = map_input(watertolight)
lighttotemperaturemap = map_input(lighttotemperature)
temperaturetohumiditymap = map_input(temperaturetohumidity)
humiditytolocationmap = map_input(humiditytolocation)

locations = [humiditytolocationmap(temperaturetohumiditymap(lighttotemperaturemap(watertolightmap(fertilisertowatermap(soiltofertilisermap(seedtosoilmap(seed))))))) for seed in seeds]
        
min(locations)

# 650599855

# Part 2

# Need to fix bug in this!

# Intersect the ranges of start and end points with the map sources start and ends points and find out where these get mapped to.
# At each stage, the intervals are split into smaller intervals by intersecting with the source intervals of the next map.
# Because the maps just shift these smaller intervals, mapping the end points tells you where the whole set of numbers gets mapped to.
# Do this at each stage of the iterated mappings.

def intersect_range(a, b, c, d):
    return [max(a, c), min(b,d)] if max(a, c) <= min(b, d) else False

stos = sorted(seedtosoil, key = lambda x: x[1])

# Need to extend the maps to include the ranges between the specified ranges (and extend to around this, but we will do that later)
# so that it is easier to map any intervals that fall in between to themselves
def pad_gaps(mapdata):
    res = []
    newdata = sorted(mapdata, key = lambda x: x[1])
    res.append(newdata[0])
    i = 1
    while i < len(mapdata):
        if newdata[i][1] > newdata[i-1][1] + newdata[i-1][2]: # Gap between ranges
            res.append([newdata[i-1][1] + newdata[i-1][2], newdata[i-1][1] + newdata[i-1][2], newdata[i][1] - (newdata[i-1][1] + newdata[i-1][2])])
        res.append(newdata[i])
        i = i + 1
    return res

stos = pad_gaps(seedtosoil)
stof = pad_gaps(soiltofertiliser)
ftow = pad_gaps(fertilisertowater)
wtol = pad_gaps(watertolight)
ltot = pad_gaps(lighttotemperature)
ttoh = pad_gaps(temperaturetohumidity)
htol = pad_gaps(humiditytolocation)

stosm = map_input(stos)
stofm = map_input(stof)
ftowm = map_input(ftow)
wtolm = map_input(wtol)
ltotm = map_input(ltot)
ttohm = map_input(ttoh)
htolm = map_input(htol)

# sourceranges is a sorted list of adjacent ranges
def get_source_ranges(rangelist, sourceranges):
    res = [intersect_range(r[0], r[1], s[0], s[1]) for r in rangelist for s in sourceranges]
    res = [a for a in res if a != False]
    # Include any parts of intervals that fall outside of the ranges in sourceranges.
    # These will map to themselves as they aren't mapped under the next map.
    for r in rangelist:
        if r[0] < sourceranges[0][0]:
            res.append(r[0],min(r[1],sourceranges[0][0]-1))
        if r[1] > sourceranges[-1][1]:
            res.append([max(sourceranges[-1][1]+1,r[0]),r[1]])
    return res

def map_ranges(paddeddata):
    return [[d[1], d[1]+d[2]-1] for d in paddeddata]

stosd = map_ranges(stos)
stofd = map_ranges(stof)
ftowd = map_ranges(ftow)            
wtold = map_ranges(wtol)
ltotd = map_ranges(ltot)
ttohd = map_ranges(ttoh)
htold = map_ranges(htol)

seedranges = sorted([[seeds[2*i], seeds[2*i] + seeds[2*i+1]-1] for i in range(int(len(seeds)/2))])

def map_endpts(maptouse, ranges):
    return [[maptouse(x) for x in r] for r in ranges]

outranges = get_source_ranges(seedranges, stosd)
mapped = map_endpts(stosm, outranges)
outranges = get_source_ranges(mapped, stofd)
mapped = map_endpts(stofm, outranges)
outranges = get_source_ranges(mapped, ftowd)
mapped = map_endpts(ftowm, outranges)
outranges = get_source_ranges(mapped, wtold)
mapped = map_endpts(wtolm, outranges)
outranges = get_source_ranges(mapped, ltotd)
mapped = map_endpts(ltotm, outranges)
outranges = get_source_ranges(mapped, ttohd)
mapped = map_endpts(ttohm, outranges)
outranges = get_source_ranges(mapped, htold)
mapped = map_endpts(htolm, outranges)

min(pt[0] for pt in mapped)
